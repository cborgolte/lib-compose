// Automatically generated by MockGen. DO NOT EDIT!
// Source: lib-ui-service/aggregation (interfaces: Fragment,ContentLoader,Content)

package aggregation

import (
	gomock "github.com/golang/mock/gomock"
	io "io"
	
	time "time"
)

// Mock of Fragment interface
type MockFragment struct {
	ctrl     *gomock.Controller
	recorder *_MockFragmentRecorder
}

// Recorder for MockFragment (not exported)
type _MockFragmentRecorder struct {
	mock *MockFragment
}

func NewMockFragment(ctrl *gomock.Controller) *MockFragment {
	mock := &MockFragment{ctrl: ctrl}
	mock.recorder = &_MockFragmentRecorder{mock}
	return mock
}

func (_m *MockFragment) EXPECT() *_MockFragmentRecorder {
	return _m.recorder
}

func (_m *MockFragment) Execute(_param0 io.Writer, _param1 map[string]interface{}, _param2 func(string)) error {
	ret := _m.ctrl.Call(_m, "Execute", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockFragmentRecorder) Execute(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Execute", arg0, arg1, arg2)
}

// Mock of ContentLoader interface
type MockContentLoader struct {
	ctrl     *gomock.Controller
	recorder *_MockContentLoaderRecorder
}

// Recorder for MockContentLoader (not exported)
type _MockContentLoaderRecorder struct {
	mock *MockContentLoader
}

func NewMockContentLoader(ctrl *gomock.Controller) *MockContentLoader {
	mock := &MockContentLoader{ctrl: ctrl}
	mock.recorder = &_MockContentLoaderRecorder{mock}
	return mock
}

func (_m *MockContentLoader) EXPECT() *_MockContentLoaderRecorder {
	return _m.recorder
}

func (_m *MockContentLoader) Load(_param0 string, _param1 time.Duration) (Content, error) {
	ret := _m.ctrl.Call(_m, "Load", _param0, _param1)
	ret0, _ := ret[0].(Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockContentLoaderRecorder) Load(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Load", arg0, arg1)
}

// Mock of Content interface
type MockContent struct {
	ctrl     *gomock.Controller
	recorder *_MockContentRecorder
}

// Recorder for MockContent (not exported)
type _MockContentRecorder struct {
	mock *MockContent
}

func NewMockContent(ctrl *gomock.Controller) *MockContent {
	mock := &MockContent{ctrl: ctrl}
	mock.recorder = &_MockContentRecorder{mock}
	return mock
}

func (_m *MockContent) EXPECT() *_MockContentRecorder {
	return _m.recorder
}

func (_m *MockContent) Body() map[string]Fragment {
	ret := _m.ctrl.Call(_m, "Body")
	ret0, _ := ret[0].(map[string]Fragment)
	return ret0
}

func (_mr *_MockContentRecorder) Body() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Body")
}

func (_m *MockContent) Head() Fragment {
	ret := _m.ctrl.Call(_m, "Head")
	ret0, _ := ret[0].(Fragment)
	return ret0
}

func (_mr *_MockContentRecorder) Head() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Head")
}

func (_m *MockContent) Meta() map[string]interface{} {
	ret := _m.ctrl.Call(_m, "Meta")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

func (_mr *_MockContentRecorder) Meta() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Meta")
}

func (_m *MockContent) RequiredContent() []*FetchDefinition {
	ret := _m.ctrl.Call(_m, "RequiredContent")
	ret0, _ := ret[0].([]*FetchDefinition)
	return ret0
}

func (_mr *_MockContentRecorder) RequiredContent() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RequiredContent")
}

func (_m *MockContent) Tail() Fragment {
	ret := _m.ctrl.Call(_m, "Tail")
	ret0, _ := ret[0].(Fragment)
	return ret0
}

func (_mr *_MockContentRecorder) Tail() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Tail")
}
